#!/usr/bin/env bash
set -euf -o pipefail

# Validate required environment variables
: "${GITHUB_TOKEN:?GITHUB_TOKEN is required}"
: "${GITHUB_REPOSITORY:?GITHUB_REPOSITORY is required}"
: "${GITHUB_REPOSITORY_OWNER:?GITHUB_REPOSITORY_OWNER is required}"
: "${VERSION_TAG:?VERSION_TAG is required}"

# Get the previous tag
PREVIOUS_TAG="$(git tag -l '20*-*-*' | sort | tail -n2 | head -n1)"

# Check if PREVIOUS_TAG is empty and exit with an error if so
if [[ -z "${PREVIOUS_TAG}" ]]; then
  echo "Error: No previous tag found. Exiting."
  exit 1
fi

# Echo PREVIOUS_TAG for debugging purposes
echo "Previous tag: ${PREVIOUS_TAG}"

# Generate the changelog using the previous and current tags
CHANGELOG="$(./scripts/generate_changelog -p "${PREVIOUS_TAG}" -o "${GITHUB_REPOSITORY_OWNER}" -r "${GITHUB_REPOSITORY}" -n "${VERSION_TAG}")"

# Verify that CHANGELOG generation was successful
if [[ -z "${CHANGELOG}" ]]; then
  echo "Error: Changelog generation failed. Exiting."
  exit 1
fi

# Check if a release already exists for the tag
RELEASE_ID=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${VERSION_TAG}" | jq -r '.id')

# Get the release ID using GitHub CLI
RELEASE_ID=$(gh release view "${VERSION_TAG}" --repo "${GITHUB_REPOSITORY}" --json id -q ".id")

if [[ "${RELEASE_ID}" == "null" ]]; then
  # Create a new GitHub release if it doesn't exist
  echo "Creating new GitHub release..."
  if ! gh release create "${VERSION_TAG}" \
    --title "Release ${VERSION_TAG}" \
    --notes "${CHANGELOG}" \
    --repo "${GITHUB_REPOSITORY}"; then
    echo "Error: Failed to create release" >&2
    exit 1
  fi
else
  # Update the existing release if it already exists
  echo "Release for tag ${VERSION_TAG} already exists. Updating release..."
  if ! gh release edit "${VERSION_TAG}" \
    --title "Release ${VERSION_TAG}" \
    --notes "${CHANGELOG}" \
    --repo "${GITHUB_REPOSITORY}"; then
    echo "Error: Failed to update release" >&2
    exit 1
  fi
fi
