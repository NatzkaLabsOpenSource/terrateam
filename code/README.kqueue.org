* About
kqueue bindings.  kqueue provides a scalable API for notifying on events.  A
program creates a kqueue and registers the events for which it wants to be
notified.  Subsequent calls to kqueue will then return which events have been
triggered.  kqueue is available on most BSD's natively and on Linux through
libkqueue.

These bindings try to find a balance between exposing the underlying API call
and providing a typesafe interface.  The entry point is the ~Kqueue~ module,
however the underlying bindings can be accessed through the ~Kqueue_bindings~
functor.
* Changes and Events
The ~Change~ and ~Event~ modules provide views on the same underlying data
structure, a ~Stubs.Kevent.t~.  ~Change~ goes from an Ocaml value to a
~Stubs.Kevent.t~ and ~Event~ goes from a ~Stubs.Kevent.t~.  However a ~Change~
and and ~Event~ are not symmetrical.  A change specifies certain fields and
semantics that an event does not, and vice versa.  Therefore a ~Change~ does not
have a function to convert a ~Stub.Kevent.t~ to a change and ~Event~ does not
have a function to convert an ~Event~ to a ~Stub.Kevent.t~.
* Raw Interface
The ~Kqueue~ module provides a typesafe interface to the ~kqueue~ system call.
It is possible that this interface is not performant in extreme cases because it
involves performing conversions between an underlying C data structure and the
Ocaml values or because of unnecessary allocations.  In such cases, it is
possible to user the underlying values directly by instantiating the bindings
functor with the following:

#+BEGIN_SRC
module Stubs = Kqueue_bindings.Stubs(Kqueue_stubs)
#+END_SRC

The ~Stubs~ module has the underlying ~Ctypes~ bindings of the data structures.
* Unsupported Parts of the API
The following aspects are unsupported by the type-safe ~Kqueue~ interface:
- Specifying user data via ~udata~, this is because managing the memory safely
  is not straight forward and difficult to debug.
- AIO, this pulls in some extra dependencies and complicates the interface.
  There is no reason not to add it if it is required.
