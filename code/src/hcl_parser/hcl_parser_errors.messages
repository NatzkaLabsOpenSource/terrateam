main: STRING
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##

The top-level must be a block or attribute.

main: NEWLINE QUESTION_MARK
##
## Ends in an error in state: 1.
##
## list(NEWLINE) -> NEWLINE . list(NEWLINE) [ TRUE STRING RPAREN RBRACKET RBRACE NULL NOT NEWLINE MINUS LPAREN LBRACKET LBRACE INTEGER IF IDENTIFIER HEREDOC FOR FLOAT FALSE EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

Expected identifier, found operator.

main: NEWLINE STRING
##
## Ends in an error in state: 4.
##
## main -> list(NEWLINE) . body EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Expected identifier, found literal.

main: IDENTIFIER TRUE
##
## Ends in an error in state: 7.
##
## block -> IDENTIFIER . block_labels LBRACE nonempty_list(NEWLINE) body RBRACE [ NEWLINE ]
## block_one_line -> IDENTIFIER . block_labels LBRACE RBRACE [ NEWLINE ]
## block_one_line -> IDENTIFIER . block_labels LBRACE attribute RBRACE [ NEWLINE ]
## identifier -> IDENTIFIER . [ EQUAL ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Expected equals (=) if an attribute or block labels if a block, found a non-string literal.

main: IDENTIFIER STRING TRUE
##
## Ends in an error in state: 8.
##
## block_labels -> STRING . block_labels [ LBRACE ]
##
## The known suffix of the stack is as follows:
## STRING
##

Expected block labels, which are strings or identifiers, found a non-string literal.

main: IDENTIFIER IDENTIFIER TRUE
##
## Ends in an error in state: 9.
##
## block_labels -> IDENTIFIER . block_labels [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Expected block labels, which are strings or identifiers, found a non-string literal.

main: IDENTIFIER LBRACE STRING
##
## Ends in an error in state: 13.
##
## block -> IDENTIFIER block_labels LBRACE . nonempty_list(NEWLINE) body RBRACE [ NEWLINE ]
## block_one_line -> IDENTIFIER block_labels LBRACE . RBRACE [ NEWLINE ]
## block_one_line -> IDENTIFIER block_labels LBRACE . attribute RBRACE [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER block_labels LBRACE
##

Expected identifier for attribute or block definition.

main: IDENTIFIER LBRACE NEWLINE RPAREN
##
## Ends in an error in state: 15.
##
## nonempty_list(NEWLINE) -> NEWLINE . [ TRUE STRING RBRACKET RBRACE NULL NOT NEWLINE MINUS LPAREN LBRACKET LBRACE INTEGER IDENTIFIER HEREDOC FLOAT FALSE EOF ]
## nonempty_list(NEWLINE) -> NEWLINE . nonempty_list(NEWLINE) [ TRUE STRING RBRACKET RBRACE NULL NOT NEWLINE MINUS LPAREN LBRACKET LBRACE INTEGER IDENTIFIER HEREDOC FLOAT FALSE EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

Unexpected closing parenthesis in block.

main: IDENTIFIER LBRACE NEWLINE STRING
##
## Ends in an error in state: 19.
##
## block -> IDENTIFIER block_labels LBRACE nonempty_list(NEWLINE) . body RBRACE [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER block_labels LBRACE nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Expected identifier for attribute or block definition.

main: FALSE TRUE
##
## Ends in an error in state: 20.
##
## attribute -> identifier . EQUAL expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## identifier
##

Top-level must start with an attribute or block, found identifier followed by literal.

main: FALSE EQUAL RPAREN
##
## Ends in an error in state: 21.
##
## attribute -> identifier EQUAL . expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## identifier EQUAL
##

Unexpected closing parenthesis, brace, or bracket found.

main: FALSE EQUAL NOT RPAREN
##
## Ends in an error in state: 25.
##
## ops -> NOT . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## NOT
##

Expected expression, found symbol.

main: FALSE EQUAL MINUS RPAREN
##
## Ends in an error in state: 26.
##
## ops -> MINUS . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Expected expression, found symbol.

main: FALSE EQUAL LPAREN RPAREN
##
## Ends in an error in state: 27.
##
## collection_expr -> LPAREN . FOR RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> LPAREN . expr RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Open parenthesis followed by invalid closing parenthesis, brace, or bracket.

main: FALSE EQUAL LBRACKET RPAREN
##
## Ends in an error in state: 28.
##
## collection_expr -> LBRACKET . list(NEWLINE) tuple_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Open bracket followed by invalid closing parenthesis or brace.

main: FALSE EQUAL LBRACKET NEWLINE RPAREN
##
## Ends in an error in state: 29.
##
## collection_expr -> LBRACKET list(NEWLINE) . tuple_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Open bracket followed by invalid closing parenthesis or brace.

main: FALSE EQUAL LBRACE RPAREN
##
## Ends in an error in state: 32.
##
## collection_expr -> LBRACE . list(NEWLINE) object_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Open brace followed by invalid closing parenthesis or brace.

main: FALSE EQUAL LBRACE NEWLINE RPAREN
##
## Ends in an error in state: 33.
##
## collection_expr -> LBRACE list(NEWLINE) . object_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Open brace followed by invalid closing parenthesis or brace.

main: FALSE EQUAL IDENTIFIER TRUE
##
## Ends in an error in state: 37.
##
## expr -> IDENTIFIER . LPAREN list(NEWLINE) fun_args RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## simple_expr -> IDENTIFIER . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Identifier must be followed by an operator, found literal.

main: FALSE EQUAL IDENTIFIER LPAREN RBRACKET
##
## Ends in an error in state: 38.
##
## expr -> IDENTIFIER LPAREN . list(NEWLINE) fun_args RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER LPAREN
##

Expected closing parenthesis in function call, found brace or bracket.

main: FALSE EQUAL IDENTIFIER LPAREN NEWLINE RBRACKET
##
## Ends in an error in state: 39.
##
## expr -> IDENTIFIER LPAREN list(NEWLINE) . fun_args RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER LPAREN list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Expected closing parenthesis in function call, found brace or bracket.

main: FALSE EQUAL IDENTIFIER LPAREN FALSE RBRACKET
##
## Ends in an error in state: 47.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . DOT attr_expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## fun_args -> expr . COMMA list(NEWLINE) fun_args [ RPAREN ]
## fun_args -> expr . [ RPAREN ]
## ops -> expr . PLUS expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MINUS expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MULT expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . DIV expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . IS_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . NOT_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_AND expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_OR expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . PERCENT expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##

Expected closing parenthesis in function call, found brace or bracket.

main: FALSE EQUAL FALSE QUESTION_MARK RPAREN
##
## Ends in an error in state: 48.
##
## expr -> expr QUESTION_MARK . expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr QUESTION_MARK
##

Expected expression in "then" section of conditional, found operator.

main: FALSE EQUAL FALSE QUESTION_MARK FALSE RPAREN
##
## Ends in an error in state: 49.
##
## expr -> expr . LBRACKET idx_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . DOT attr_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr QUESTION_MARK expr . COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MINUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MULT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . DIV expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . IS_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . NOT_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_AND expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_OR expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . PERCENT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
##
## The known suffix of the stack is as follows:
## expr QUESTION_MARK expr
##

Expected "else" expression in conditional.

main: FALSE EQUAL FALSE PLUS RPAREN
##
## Ends in an error in state: 50.
##
## ops -> expr PLUS . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Second binary operand expected.

main: FALSE EQUAL FALSE PLUS FALSE TRUE
##
## Ends in an error in state: 51.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr PLUS expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE PERCENT RPAREN
##
## Ends in an error in state: 52.
##
## ops -> expr PERCENT . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr PERCENT
##

Second binary operand expected.

main: FALSE EQUAL FALSE PERCENT FALSE TRUE
##
## Ends in an error in state: 53.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr PERCENT expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr PERCENT expr
##

Unexpected identifier or literal found after literal in percent operation.

main: FALSE EQUAL FALSE LBRACKET RPAREN
##
## Ends in an error in state: 54.
##
## expr -> expr LBRACKET . idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LBRACKET
##

Unexpected parenthesis or brace found in index operation.

main: FALSE EQUAL FALSE LBRACKET MULT TRUE
##
## Ends in an error in state: 55.
##
## idx_expr -> MULT . RBRACKET [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MULT
##

Unexpected identifier found after splat operator.

main: FALSE EQUAL FALSE LBRACKET FALSE RPAREN
##
## Ends in an error in state: 58.
##
## expr -> expr . LBRACKET idx_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## idx_expr -> expr . RBRACKET [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## expr
##

Unexpected parenthesis or brace found in index operation.

main: FALSE EQUAL FALSE NOT_EQUAL RPAREN
##
## Ends in an error in state: 60.
##
## ops -> expr NOT_EQUAL . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr NOT_EQUAL
##

Expression expected in comparison.

main: FALSE EQUAL FALSE NOT_EQUAL FALSE TRUE
##
## Ends in an error in state: 61.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr NOT_EQUAL expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr NOT_EQUAL expr
##

Unexpected literal or identifier found after literal in second operand of not equals operation.

main: FALSE EQUAL FALSE MULT RPAREN
##
## Ends in an error in state: 62.
##
## ops -> expr MULT . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr MULT
##

Second binary operand expected.

main: FALSE EQUAL FALSE MULT FALSE TRUE
##
## Ends in an error in state: 63.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr MULT expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr MULT expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE DOT TRUE
##
## Ends in an error in state: 64.
##
## expr -> expr DOT . attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

Unexpected literal for attribute name, expected an identifier or integer.

main: FALSE EQUAL FALSE MINUS RPAREN
##
## Ends in an error in state: 70.
##
## ops -> expr MINUS . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Second binary operand expected.

main: FALSE EQUAL FALSE MINUS FALSE TRUE
##
## Ends in an error in state: 71.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr MINUS expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE DIV RPAREN
##
## Ends in an error in state: 72.
##
## ops -> expr DIV . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

Second binary operand expected.

main: FALSE EQUAL FALSE DIV FALSE TRUE
##
## Ends in an error in state: 73.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr DIV expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE LESS_THAN_EQUAL RPAREN
##
## Ends in an error in state: 74.
##
## ops -> expr LESS_THAN_EQUAL . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LESS_THAN_EQUAL
##

Second binary operand expected.

main: FALSE EQUAL FALSE LESS_THAN_EQUAL FALSE TRUE
##
## Ends in an error in state: 75.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr LESS_THAN_EQUAL expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LESS_THAN_EQUAL expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE LESS_THAN RPAREN
##
## Ends in an error in state: 76.
##
## ops -> expr LESS_THAN . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LESS_THAN
##

Second binary operand expected.

main: FALSE EQUAL FALSE LESS_THAN FALSE TRUE
##
## Ends in an error in state: 77.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr LESS_THAN expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LESS_THAN expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE GREATER_THAN_EQUAL RPAREN
##
## Ends in an error in state: 78.
##
## ops -> expr GREATER_THAN_EQUAL . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr GREATER_THAN_EQUAL
##

Second binary operand expected.

main: FALSE EQUAL FALSE GREATER_THAN_EQUAL FALSE TRUE
##
## Ends in an error in state: 79.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr GREATER_THAN_EQUAL expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr GREATER_THAN_EQUAL expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE GREATER_THAN RPAREN
##
## Ends in an error in state: 80.
##
## ops -> expr GREATER_THAN . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr GREATER_THAN
##

Second binary operand expected.

main: FALSE EQUAL FALSE GREATER_THAN FALSE TRUE
##
## Ends in an error in state: 81.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr GREATER_THAN expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr GREATER_THAN expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE LOG_OR RPAREN
##
## Ends in an error in state: 82.
##
## ops -> expr LOG_OR . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LOG_OR
##

Second binary operand expected.

main: FALSE EQUAL FALSE LOG_OR FALSE TRUE
##
## Ends in an error in state: 83.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr LOG_OR expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LOG_OR expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE LOG_AND RPAREN
##
## Ends in an error in state: 84.
##
## ops -> expr LOG_AND . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LOG_AND
##

Second binary operand expected.

main: FALSE EQUAL FALSE LOG_AND FALSE TRUE
##
## Ends in an error in state: 85.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr LOG_AND expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr LOG_AND expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE IS_EQUAL RPAREN
##
## Ends in an error in state: 86.
##
## ops -> expr IS_EQUAL . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IS_EQUAL
##

Second binary operand expected.

main: FALSE EQUAL FALSE IS_EQUAL FALSE TRUE
##
## Ends in an error in state: 87.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr IS_EQUAL expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr IS_EQUAL expr
##

Unexpected literal or identifier found following binary operation.

main: FALSE EQUAL FALSE QUESTION_MARK FALSE COLON RPAREN
##
## Ends in an error in state: 88.
##
## expr -> expr QUESTION_MARK expr COLON . expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr QUESTION_MARK expr COLON
##

Expression expected in "else" section of condition.

main: FALSE EQUAL FALSE QUESTION_MARK FALSE COLON FALSE TRUE
##
## Ends in an error in state: 89.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr QUESTION_MARK expr COLON expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## expr QUESTION_MARK expr COLON expr
##

Unexpected literal or identifier found following conditional.

main: FALSE EQUAL IDENTIFIER LPAREN FALSE COMMA RBRACKET
##
## Ends in an error in state: 90.
##
## fun_args -> expr COMMA . list(NEWLINE) fun_args [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Unexpected closing brace or bracket found in function call.

main: FALSE EQUAL IDENTIFIER LPAREN FALSE COMMA NEWLINE RBRACKET
##
## Ends in an error in state: 91.
##
## fun_args -> expr COMMA list(NEWLINE) . fun_args [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected closing brace or bracket found in function call.

main: FALSE EQUAL LBRACE FOR TRUE
##
## Ends in an error in state: 93.
##
## object_expr -> list(NEWLINE) FOR . list(NEWLINE) for_object list(NEWLINE) RBRACE [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR
##

Expected identifier in for definition, found literal.

main: FALSE EQUAL LBRACE FOR NEWLINE TRUE
##
## Ends in an error in state: 94.
##
## object_expr -> list(NEWLINE) FOR list(NEWLINE) . for_object list(NEWLINE) RBRACE [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Expected identifier in for definition, found literal.

main: FALSE EQUAL LBRACE FOR IDENTIFIER TRUE
##
## Ends in an error in state: 95.
##
## for_object -> IDENTIFIER . identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER . identifiers_rest IN expr COLON expr FAT_ARROW expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Expected identifier in for definition, found literal.

main: FALSE EQUAL LBRACE FOR IDENTIFIER COMMA TRUE
##
## Ends in an error in state: 96.
##
## identifiers_rest -> COMMA . IDENTIFIER identifiers_rest [ IN ]
##
## The known suffix of the stack is as follows:
## COMMA
##

Expected identifier in for definition, found literal.

main: FALSE EQUAL LBRACE FOR IDENTIFIER COMMA IDENTIFIER TRUE
##
## Ends in an error in state: 97.
##
## identifiers_rest -> COMMA IDENTIFIER . identifiers_rest [ IN ]
##
## The known suffix of the stack is as follows:
## COMMA IDENTIFIER
##

Expected identifier in for definition, found literal.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN RPAREN
##
## Ends in an error in state: 100.
##
## for_object -> IDENTIFIER identifiers_rest IN . expr COLON expr FAT_ARROW expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN . expr COLON expr FAT_ARROW expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN
##

Expected expression in "in" section of object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE RPAREN
##
## Ends in an error in state: 101.
##
## expr -> expr . LBRACKET idx_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . DOT attr_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## for_object -> IDENTIFIER identifiers_rest IN expr . COLON expr FAT_ARROW expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN expr . COLON expr FAT_ARROW expr [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MINUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MULT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . DIV expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . IS_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . NOT_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_AND expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_OR expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . PERCENT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr
##

Unexpected closing parenthesis or bracket in for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON RPAREN
##
## Ends in an error in state: 102.
##
## for_object -> IDENTIFIER identifiers_rest IN expr COLON . expr FAT_ARROW expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON . expr FAT_ARROW expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON
##

Expected key-value expression in object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE RPAREN
##
## Ends in an error in state: 103.
##
## expr -> expr . LBRACKET idx_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## expr -> expr . DOT attr_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr . FAT_ARROW expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr . FAT_ARROW expr [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . MINUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . MULT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . DIV expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . LESS_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . GREATER_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . IS_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . LOG_AND expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . LOG_OR expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
## ops -> expr . PERCENT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW DOT DIV ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr
##

Expected key-value in object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW RPAREN
##
## Ends in an error in state: 104.
##
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW . expr list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW . expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW
##

Expression expected in object for value definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW FALSE RPAREN
##
## Ends in an error in state: 105.
##
## expr -> expr . LBRACKET idx_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr . list(NEWLINE) IF expr [ RBRACE NEWLINE ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr . [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr
##

Unexpected end object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW FALSE NEWLINE TRUE
##
## Ends in an error in state: 106.
##
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) . IF expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected new line in object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW FALSE IF RPAREN
##
## Ends in an error in state: 107.
##
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) IF . expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) IF
##

Expression expected in condition section of object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW FALSE IF FALSE RPAREN
##
## Ends in an error in state: 108.
##
## expr -> expr . LBRACKET idx_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## for_object -> IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) IF expr . [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr FAT_ARROW expr list(NEWLINE) IF expr
##

Unexpected parenthesis or bracket in condition section of object for definition.

main: FALSE EQUAL LBRACE FOR IDENTIFIER IN FALSE COLON FALSE FAT_ARROW FALSE IF FALSE NEWLINE TRUE
##
## Ends in an error in state: 110.
##
## object_expr -> list(NEWLINE) FOR list(NEWLINE) for_object list(NEWLINE) . RBRACE [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR list(NEWLINE) for_object list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected new line in object for definition.

main: FALSE EQUAL LBRACE FALSE RPAREN
##
## Ends in an error in state: 115.
##
## expr -> expr . LBRACKET idx_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## expr -> expr . DOT attr_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## obj -> expr . EQUAL expr COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr . COLON expr COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr . EQUAL expr nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr . COLON expr nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr . EQUAL expr [ RBRACE NEWLINE ]
## obj -> expr . COLON expr [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . MINUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . MULT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . DIV expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . LESS_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . GREATER_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . IS_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . NOT_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . LOG_AND expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . LOG_OR expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
## ops -> expr . PERCENT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN EQUAL DOT DIV COLON ]
##
## The known suffix of the stack is as follows:
## expr
##

Expected object value, found unexpected symbol.

main: FALSE EQUAL LBRACE FALSE EQUAL RPAREN
##
## Ends in an error in state: 116.
##
## obj -> expr EQUAL . expr COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr EQUAL . expr nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr EQUAL . expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL
##

Expected expression, found symbol.

main: FALSE EQUAL LBRACE FALSE EQUAL FALSE RPAREN
##
## Ends in an error in state: 117.
##
## expr -> expr . LBRACKET idx_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . DOT attr_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## obj -> expr EQUAL expr . COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr EQUAL expr . nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr EQUAL expr . [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MINUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MULT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . DIV expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . IS_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . NOT_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_AND expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_OR expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . PERCENT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr
##

Unexpected closing parenthesis or bracket in object definition.

main: FALSE EQUAL LBRACE FALSE EQUAL FALSE COMMA RPAREN
##
## Ends in an error in state: 118.
##
## obj -> expr EQUAL expr COMMA . list(NEWLINE) obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr COMMA
##

Unexpected closing parenthesis or bracket in object definition.

main: FALSE EQUAL LBRACE FALSE EQUAL FALSE COMMA NEWLINE RPAREN
##
## Ends in an error in state: 119.
##
## obj -> expr EQUAL expr COMMA list(NEWLINE) . obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr COMMA list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected newline in object definition.

main: FALSE EQUAL LBRACE FALSE EQUAL FALSE NEWLINE RBRACKET
##
## Ends in an error in state: 121.
##
## obj -> expr EQUAL expr nonempty_list(NEWLINE) . obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr EQUAL expr nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected closing bracket in object definition.

main: FALSE EQUAL LBRACE FALSE COLON RPAREN
##
## Ends in an error in state: 123.
##
## obj -> expr COLON . expr COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr COLON . expr nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr COLON . expr [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COLON
##

Expected object value, found unexpected symbol.

main: FALSE EQUAL LBRACE FALSE COLON FALSE RPAREN
##
## Ends in an error in state: 124.
##
## expr -> expr . LBRACKET idx_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . DOT attr_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## obj -> expr COLON expr . COMMA list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr COLON expr . nonempty_list(NEWLINE) obj [ RBRACE NEWLINE ]
## obj -> expr COLON expr . [ RBRACE NEWLINE ]
## ops -> expr . PLUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MINUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MULT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . DIV expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . IS_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . NOT_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_AND expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_OR expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . PERCENT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
##
## The known suffix of the stack is as follows:
## expr COLON expr
##

Unexpected closing parenthesis or bracket in object definition.

main: FALSE EQUAL LBRACE FALSE COLON FALSE COMMA RPAREN
##
## Ends in an error in state: 125.
##
## obj -> expr COLON expr COMMA . list(NEWLINE) obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COLON expr COMMA
##

Object key-value pair expected, found operation.

main: FALSE EQUAL LBRACE FALSE COLON FALSE COMMA NEWLINE RPAREN
##
## Ends in an error in state: 126.
##
## obj -> expr COLON expr COMMA list(NEWLINE) . obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COLON expr COMMA list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected newline in object definition.

main: FALSE EQUAL LBRACE FALSE COLON FALSE NEWLINE RBRACKET
##
## Ends in an error in state: 128.
##
## obj -> expr COLON expr nonempty_list(NEWLINE) . obj [ RBRACE NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COLON expr nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected closing bracket in object definition.

main: FALSE EQUAL LBRACKET FOR TRUE
##
## Ends in an error in state: 130.
##
## tuple_expr -> list(NEWLINE) FOR . list(NEWLINE) for_tuple list(NEWLINE) RBRACKET [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR
##

Expected identifier in tuple for definition, found literal.

main: FALSE EQUAL LBRACKET FOR NEWLINE TRUE
##
## Ends in an error in state: 131.
##
## tuple_expr -> list(NEWLINE) FOR list(NEWLINE) . for_tuple list(NEWLINE) RBRACKET [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Expected identifier in tuple for definition, found literal.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER TRUE
##
## Ends in an error in state: 132.
##
## for_tuple -> IDENTIFIER . identifiers_rest IN expr COLON expr list(NEWLINE) IF expr [ RBRACKET NEWLINE ]
## for_tuple -> IDENTIFIER . identifiers_rest IN expr COLON expr [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER
##

Expected additional identifiers or in-clause in tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN RPAREN
##
## Ends in an error in state: 134.
##
## for_tuple -> IDENTIFIER identifiers_rest IN . expr COLON expr list(NEWLINE) IF expr [ RBRACKET NEWLINE ]
## for_tuple -> IDENTIFIER identifiers_rest IN . expr COLON expr [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN
##

Expected expression in "in" section of tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE RPAREN
##
## Ends in an error in state: 135.
##
## expr -> expr . LBRACKET idx_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . DOT attr_expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr . COLON expr list(NEWLINE) IF expr [ RBRACKET NEWLINE ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr . COLON expr [ RBRACKET NEWLINE ]
## ops -> expr . PLUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MINUS expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . MULT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . DIV expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . IS_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . NOT_EQUAL expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_AND expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . LOG_OR expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
## ops -> expr . PERCENT expr [ QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COLON ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr
##

Expected expression after in-clause in tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON RPAREN
##
## Ends in an error in state: 136.
##
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON . expr list(NEWLINE) IF expr [ RBRACKET NEWLINE ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON . expr [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON
##

Expected expression in tuple for definition, found unexpected symbol.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON FALSE RPAREN
##
## Ends in an error in state: 137.
##
## expr -> expr . LBRACKET idx_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON expr . list(NEWLINE) IF expr [ RBRACKET NEWLINE ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON expr . [ RBRACKET NEWLINE ]
## ops -> expr . PLUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr
##

Expected closing bracket of tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON FALSE NEWLINE TRUE
##
## Ends in an error in state: 138.
##
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE) . IF expr [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected new line in tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON FALSE IF RPAREN
##
## Ends in an error in state: 139.
##
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE) IF . expr [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE) IF
##

Expected expression in "if" section of tuple for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON FALSE IF FALSE RPAREN
##
## Ends in an error in state: 140.
##
## expr -> expr . LBRACKET idx_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## for_tuple -> IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE) IF expr . [ RBRACKET NEWLINE ]
## ops -> expr . PLUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER identifiers_rest IN expr COLON expr list(NEWLINE) IF expr
##

Unexpected parenthesis or bracket in condition section of object for definition.

main: FALSE EQUAL LBRACKET FOR IDENTIFIER IN FALSE COLON FALSE IF FALSE NEWLINE TRUE
##
## Ends in an error in state: 142.
##
## tuple_expr -> list(NEWLINE) FOR list(NEWLINE) for_tuple list(NEWLINE) . RBRACKET [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) FOR list(NEWLINE) for_tuple list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected new line in tuple for definition.

main: FALSE EQUAL LBRACKET FALSE RPAREN
##
## Ends in an error in state: 147.
##
## expr -> expr . LBRACKET idx_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . DOT attr_expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . PLUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MINUS expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . MULT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . DIV expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . IS_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . NOT_EQUAL expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_AND expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . LOG_OR expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## ops -> expr . PERCENT expr [ RBRACKET QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV COMMA ]
## tuple -> expr . COMMA list(NEWLINE) tuple [ RBRACKET NEWLINE ]
## tuple -> expr . nonempty_list(NEWLINE) tuple [ RBRACKET NEWLINE ]
## tuple -> expr . [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr
##

Unexpected closing parenthesis or brace in tuple definition.

main: FALSE EQUAL LBRACKET FALSE COMMA RPAREN
##
## Ends in an error in state: 148.
##
## tuple -> expr COMMA . list(NEWLINE) tuple [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Unexpected closing parenthesis or brace in tuple definition.

main: FALSE EQUAL LBRACKET FALSE COMMA NEWLINE RPAREN
##
## Ends in an error in state: 149.
##
## tuple -> expr COMMA list(NEWLINE) . tuple [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr COMMA list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production list(NEWLINE) ->
## In state 2, spurious reduction of production list(NEWLINE) -> NEWLINE list(NEWLINE)
##

Unexpected closing parenthesis or brace in tuple definition.

main: FALSE EQUAL LBRACKET FALSE NEWLINE RBRACE
##
## Ends in an error in state: 151.
##
## tuple -> expr nonempty_list(NEWLINE) . tuple [ RBRACKET NEWLINE ]
##
## The known suffix of the stack is as follows:
## expr nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected closing parenthesis or brace in tuple definition.

main: FALSE EQUAL LPAREN FOR TRUE
##
## Ends in an error in state: 153.
##
## collection_expr -> LPAREN FOR . RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN FOR
##

Expected closing parenthesis after for.

main: FALSE EQUAL LPAREN FALSE RBRACKET
##
## Ends in an error in state: 155.
##
## expr -> LPAREN expr . RPAREN [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . LBRACKET idx_expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PLUS expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RPAREN QUESTION_MARK PLUS PERCENT NOT_EQUAL MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Unexpected closing brace or bracket.

main: FALSE EQUAL MINUS FALSE TRUE
##
## Ends in an error in state: 157.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> MINUS expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## MINUS expr
##

Expected operation after value, found identifier or literal.

main: FALSE EQUAL NOT FALSE TRUE
##
## Ends in an error in state: 158.
##
## expr -> expr . LBRACKET idx_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . DOT attr_expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PLUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MINUS expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . MULT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . DIV expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LESS_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . IS_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . NOT_EQUAL expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_AND expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . LOG_OR expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> expr . PERCENT expr [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
## ops -> NOT expr . [ RPAREN RBRACKET RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL IF GREATER_THAN_EQUAL GREATER_THAN FAT_ARROW EQUAL DOT DIV COMMA COLON ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

Expected operation after value, found identifier or literal.

main: FALSE EQUAL FALSE RPAREN
##
## Ends in an error in state: 159.
##
## attribute -> identifier EQUAL expr . [ RBRACE NEWLINE ]
## expr -> expr . LBRACKET idx_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . DOT attr_expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## expr -> expr . QUESTION_MARK expr COLON expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PLUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MINUS expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . MULT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . DIV expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LESS_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . GREATER_THAN_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . IS_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . NOT_EQUAL expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_AND expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . LOG_OR expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
## ops -> expr . PERCENT expr [ RBRACE QUESTION_MARK PLUS PERCENT NOT_EQUAL NEWLINE MULT MINUS LOG_OR LOG_AND LESS_THAN_EQUAL LESS_THAN LBRACKET IS_EQUAL GREATER_THAN_EQUAL GREATER_THAN DOT DIV ]
##
## The known suffix of the stack is as follows:
## identifier EQUAL expr
##

Unmatched closing parenthesis or bracket.

main: IDENTIFIER LBRACE NEWLINE FALSE EQUAL FALSE NEWLINE EOF
##
## Ends in an error in state: 160.
##
## block -> IDENTIFIER block_labels LBRACE nonempty_list(NEWLINE) body . RBRACE [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER block_labels LBRACE nonempty_list(NEWLINE) body
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
## In state 169, spurious reduction of production body ->
## In state 170, spurious reduction of production body -> attribute nonempty_list(NEWLINE) body
##

Unclosed block.

main: IDENTIFIER LBRACE RBRACE TRUE
##
## Ends in an error in state: 162.
##
## body -> block_one_line . nonempty_list(NEWLINE) body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## block_one_line
##

Unexpected symbol after closing brace in block.

main: IDENTIFIER LBRACE RBRACE NEWLINE STRING
##
## Ends in an error in state: 163.
##
## body -> block_one_line nonempty_list(NEWLINE) . body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## block_one_line nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected literal after end of block.

main: IDENTIFIER LBRACE NEWLINE RBRACE TRUE
##
## Ends in an error in state: 165.
##
## body -> block . nonempty_list(NEWLINE) body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## block
##

Unexpected symbol after closing brace in block.

main: IDENTIFIER LBRACE NEWLINE RBRACE NEWLINE STRING
##
## Ends in an error in state: 166.
##
## body -> block nonempty_list(NEWLINE) . body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## block nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected literal after end of block.

main: FALSE EQUAL FALSE RBRACE
##
## Ends in an error in state: 168.
##
## body -> attribute . nonempty_list(NEWLINE) body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## attribute
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 159, spurious reduction of production attribute -> identifier EQUAL expr
##

Unmatched closing brace.

main: FALSE EQUAL FALSE NEWLINE STRING
##
## Ends in an error in state: 169.
##
## body -> attribute nonempty_list(NEWLINE) . body [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## attribute nonempty_list(NEWLINE)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
##

Unexpected literal found after attribute.

main: IDENTIFIER LBRACE FALSE EQUAL FALSE NEWLINE
##
## Ends in an error in state: 171.
##
## block_one_line -> IDENTIFIER block_labels LBRACE attribute . RBRACE [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER block_labels LBRACE attribute
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 159, spurious reduction of production attribute -> identifier EQUAL expr
##

Expected entire block on one line but missing closing brace.

main: FALSE EQUAL FALSE NEWLINE RBRACE
##
## Ends in an error in state: 173.
##
## main -> list(NEWLINE) body . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(NEWLINE) body
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production nonempty_list(NEWLINE) -> NEWLINE
## In state 169, spurious reduction of production body ->
## In state 170, spurious reduction of production body -> attribute nonempty_list(NEWLINE) body
##

Unexpected closing brace.

